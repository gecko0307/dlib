/*
Copyright (c) 2019-2024 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
module dcore.stdio;

version(WebAssembly)
{
    import dcore.stdarg;
    
    extern(C) nothrow @nogc
    {
        // Implement these on browser side
        void jsPrintChar(uint c);
        void jsPrintString(uint str, uint len);
        
        int putchar(int c)
        {
            jsPrintChar(c);
            return c;
        }
        
        int puts(const(char)* s)
        {
            int len = 0;
            while(true)
            {
                char c = s[len];
                if (c == 0) break;
                len++;
            }
            jsPrintString(cast(uint)s, len);
            return '\n';
        }
        
        const char[] hexmap = [
            '0', '1', '2', '3', 
            '4', '5', '6', '7', 
            '8', '9', 'A', 'B', 
            'C', 'D', 'E', 'F'
        ];
        
        int printf(const(char)* fmt, ...)
        {
            /* 
             * Variadic arguments forwarding is not implemented yet,
             * so we just print fmt
             */
            puts(fmt);
            
            /*
            va_list args;
            va_start(args, fmt);
            
            uint f;
            int pos = 0;
            while(true)
            {
                char c = fmt[pos];
                pos++;
                if (c == 0) break;
                
                if (c == '%')
                {
                    pos++;
                    c = fmt[pos];
                    if (c == 0) break;
                    
                    switch(c)
                    {
                        case 'c': // ASCII character
                            jsPrintChar(va_arg!char(args));
                            break;
                        
                        case 's': // zero-terminated string
                            char* strPtr = va_arg!(char*)(args);
                            for(char n = *strPtr; n != 0; strPtr++)
                            {
                                n = *strPtr;
                                jsPrintChar(n);
                            }
                            break;
                        
                        case 'x': // 8 digit, unsigned 32bit hex integer
                            uint u = va_arg!(uint)(args);
                            jsPrintChar('0');
                            jsPrintChar('x');
                            char[8] digits;
                            for (int j = 7; j >= 0; j--)
                            {
                                digits[j] = hexmap[u & 0x0F];
                                u >>= 4;
                            }
                            foreach(char d; digits)
                                jsPrintChar(d);
                            break;
                        
                        case 'k': // 4 digit, unsigned 16bit hex integer
                            ushort u = va_arg!ushort(args);
                            jsPrintChar('0');
                            jsPrintChar('x');
                            char[4] digits;
                            for (int j = 3; j >= 0; j--)
                            {
                                digits[j] = hexmap[u & 0x0F];
                                u >>= 4;
                            }
                            foreach(char d; digits)
                                jsPrintChar(d);
                            break;
                        
                        case 'd': // signed integer
                            int w = va_arg!int(args);
                            if (w < 0)
                            {
                                f = -w;
                                jsPrintChar('-');
                            }
                            else
                            {
                                f = w;
                            }
                            goto u2;
                            break;
                        
                        case 'u': // unsigned integer
                            f = va_arg!uint(args);
                            u2:
                            {
                                char[10] d;
                                int k = 9;
                                do
                                {
                                    d[k] = (f % 10) + '0';
                                    f /= 10;
                                    k--;
                                }
                                while(f && k >= 0);
                                while(++k < 10)
                                {
                                    jsPrintChar(d[k]);
                                }
                            }
                            break;
                        
                        case 'X': // 2 digit, unsigned 8 bit hex integer
                            ubyte b = va_arg!(ubyte)(args);
                            jsPrintChar('0');
                            jsPrintChar('x');
                            jsPrintChar(hexmap[(b & 0xF0) >> 4]);
                            jsPrintChar(hexmap[b & 0x0F]);
                            break;
                        
                        default:
                            jsPrintChar(c);
                            break;
                    }
                }
                else
                    jsPrintChar(c);
            }
            
            va_end(args);
            */
            
            return 0;
        }
    }
}
else
version(FreeStanding)
{
    extern(C) nothrow @nogc
    {
        // Placeholders
        int putchar(int c) { return c; }
        int puts(const(char)* s) { return '\n'; }
        int printf(const(char)* fmt, ...) { return 0; }
    }
}
else
{
    extern(C) nothrow @nogc
    {
        // Use C runtime functions
        int putchar(int c);
        int puts(const char* s);
        int printf(const char* fmt, ...);
    }
}
