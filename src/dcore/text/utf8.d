/*
Copyright (c) 2015-2024 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * UTF-8 encoder and decoder
 *
 * Copyright: Timur Gafarov 2015-2020.
 * License: $(LINK2 boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Timur Gafarov, Roman Chistokhodov
 */
module dcore.text.utf8;

import dcore.text.common;

/// Constant to return from UTF8Decoder on the end of string.
enum UTF8_END = DECODE_END;

/// Constant to return from UTF8Decoder when error occurs.
enum UTF8_ERROR = DECODE_ERROR;

/**
 * UTF-8 decoder to use with dcore.text.encodings.transcode
 */
struct UTF8Decoder
{
    public:
    
    /// Input string. Set it before decoding
    string input;
    
    /// Current index in an input string
    size_t index = 0;
    
    /// Current character index
    int character = 0;

    private:
    int get()
    {
        if (index >= input.length)
            return UTF8_END;
        auto c = input[index] & 0xFF;
        index++;
        return c;
    }

    int cont()
    {
        int c = get();
        return ((c & 0xC0) == 0x80) ? (c & 0x3F): UTF8_ERROR;
    }

    public:
    /**
     * Decode next character.
     * Returns: decoded code point, or UTF8_ERROR if error occured, or UTF8_END if input has no more characters.
     */
    int decodeNext()
    {
        int c;  // the first byte of the character
        int r;  // the result

        if (index >= input.length)
            return index == input.length ? UTF8_END : UTF8_ERROR;

        character++;
        c = get();

        // Zero continuation (0 to 127)
        if ((c & 0x80) == 0)
            return c;

        // One continuation (128 to 2047)
        if ((c & 0xE0) == 0xC0)
        {
            int c1 = cont();
            if (c1 >= 0)
            {
                r = ((c & 0x1F) << 6) | c1;
                return r >= 128 ? r : UTF8_ERROR;
            }
        }
        // Two continuation (2048 to 55295 and 57344 to 65535)
        else if ((c & 0xF0) == 0xE0)
        {
            int c1 = cont();
            int c2 = cont();
            if ((c1 | c2) >= 0)
            {
                r = ((c & 0x0F) << 12) | (c1 << 6) | c2;
                return r >= 2048 && (r < 55296 || r > 57343) ? r : UTF8_ERROR;
            }
        }
        // Three continuation (65536 to 1114111)
        else if ((c & 0xF8) == 0xF0)
        {
            int c1 = cont();
            int c2 = cont();
            int c3 = cont();
            if ((c1 | c2 | c3) >= 0)
            {
                return (((c & 0x0F) << 18) | (c1 << 12) | (c2 << 6) | c3);
            }
        }

        return UTF8_ERROR;
    }
    
    /**
     * Check if decoder is in the end of input.
     */
    bool eos()
    {
        return (index >= input.length);
    }

    /**
     * Range interface.
     */
    auto decode(string s)
    {
        input = s;
        
        static struct ByDchar
        {
            private:
            
            UTF8Decoder _decoder;
            dchar _lastRead;
            
            public:
            
            this(UTF8Decoder decoder)
            {
                _decoder = decoder;
                _lastRead = cast(dchar)_decoder.decodeNext();
            }

            bool empty()
            {
                return _lastRead == UTF8_END || _lastRead == UTF8_ERROR;
            }

            dchar front()
            {
                return _lastRead;
            }

            void popFront()
            {
                _lastRead = cast(dchar)_decoder.decodeNext();
            }

            auto save() {
                return this;
            }
        }

        return ByDchar(this);
    }
    
    /// ditto
    auto decode()
    {
        return decode(input);
    }
    
    deprecated("use UTF8Decoder.decode instead")
    auto byDChar()
    {
        return decode();
    }

    ///
    unittest
    {
        auto decoder = UTF8Decoder("Eng 日本語 Кир ©€");
        import std.algorithm: equal;
        assert(equal(decoder.decode(), "Eng 日本語 Кир ©€"d));

        auto range = decoder.decode();
        auto saved = range.save;

        range.popFront();
        range.popFront();
        range.popFront();
        range.popFront();
        range.popFront();

        assert(equal(range, "本語 Кир ©€"d));
        assert(equal(saved, "Eng 日本語 Кир ©€"d));
    }
}

///
unittest
{
    {
        auto decoder = UTF8Decoder("Eng 日本語 Кир ©€\xF0\x90\x8D\x88");
        assert(decoder.decodeNext() == 'E');
        assert(decoder.decodeNext() == 'n');
        assert(decoder.decodeNext() == 'g');
        assert(decoder.decodeNext() == ' ');
        assert(decoder.decodeNext() == '日');
        assert(decoder.decodeNext() == '本');
        assert(decoder.decodeNext() == '語');
        assert(decoder.decodeNext() == ' ');
        assert(decoder.decodeNext() == 'К');
        assert(decoder.decodeNext() == 'и');
        assert(decoder.decodeNext() == 'р');
        assert(decoder.decodeNext() == ' ');
        assert(decoder.decodeNext() == '©');
        assert(decoder.decodeNext() == '€');
        assert(decoder.decodeNext() == 0x10348);
        assert(decoder.decodeNext() == UTF8_END);
        assert(decoder.get() == UTF8_END);
        assert(decoder.eos());
    }
    {
        auto decoder = UTF8Decoder("日本語"[0..$-1]);
        assert(decoder.decodeNext() == '日');
        assert(decoder.decodeNext() == '本');
        assert(decoder.decodeNext() == UTF8_ERROR);
    }
}

/**
 * UTF-8 encoder to use with dlib.text.encodings.transcode
 */
struct UTF8Encoder
{
    /**
     * Encodes a Unicode code point to UTF-8 into user-provided buffer.
     * Returns number of bytes written, or 0 at error.
     */
    size_t encode(uint c, char[] buffer)
    {
        if (c <= 0x7F)
        {
            // Plain ASCII
            buffer[0] = cast(char)c;
            return 1;
        }
        else if (c <= 0x07FF)
        {
            // 2-byte unicode
            buffer[0] = cast(char)(((c >> 6) & 0x1F) | 0xC0);
            buffer[1] = cast(char)(((c >> 0) & 0x3F) | 0x80);
            return 2;
        }
        else if (c <= 0xFFFF)
        {
            // 3-byte unicode
            buffer[0] = cast(char)(((c >> 12) & 0x0F) | 0xE0);
            buffer[1] = cast(char)(((c >>  6) & 0x3F) | 0x80);
            buffer[2] = cast(char)(((c >>  0) & 0x3F) | 0x80);
            return 3;
        }
        else if (c <= 0x10FFFF)
        {
            // 4-byte unicode
            buffer[0] = cast(char)(((c >> 18) & 0x07) | 0xF0);
            buffer[1] = cast(char)(((c >> 12) & 0x3F) | 0x80);
            buffer[2] = cast(char)(((c >>  6) & 0x3F) | 0x80);
            buffer[3] = cast(char)(((c >>  0) & 0x3F) | 0x80);
            return 4;
        }
        else
        {
            // error
            return 0;
        }
    }
}
